// 8b/10b encoding for transmission
wire [9:0] TMDS_red, TMDS_green, TMDS_blue; reg DrawArea;
always @(posedge pixel_clk)
    begin  
        DrawArea <= ( horizontal_count<total_horizontal ) && (vertical_count<total_veritcal ); 
 end

// instantiate TMDS encoders (TMDS_encoder.vhd file from website I sent to you before)
TMDS_encoder encode_R(.clk(pixel_clk), .VD(red_color  ), .CD(2'b00)        , .VDE(DrawArea), .TMDS(TMDS_red));
TMDS_encoder encode_G(.clk(pixel_clk), .VD(green_color), .CD(2'b00)        , .VDE(DrawArea), .TMDS(TMDS_green));
TMDS_encoder encode_B(.clk(pixel_clk), .VD(blue_color ), .CD({v_sync,h_sync}), .VDE(DrawArea), .TMDS(TMDS_blue));   // 

// end 8b/10b encoding

// Serializer and output buffers
reg [3:0] TMDS_mod10=0;  // modulus 10 counter
reg [9:0] TMDS_shift_red=0, TMDS_shift_green=0, TMDS_shift_blue=0;
reg TMDS_shift_load=0;

always @(posedge clk_TMDS) 
    TMDS_shift_load <= (TMDS_mod10==4'd9);  // shift load is high only if mod ten counter is done

always @(posedge clk_TMDS)
    begin
        TMDS_shift_red   <= TMDS_shift_load ? TMDS_red   : TMDS_shift_red  [9:1];  // only if all the old data has been serialized, then start shifting new data
        TMDS_shift_green <= TMDS_shift_load ? TMDS_green : TMDS_shift_green[9:1];  // kind of a wierd way of shifting but it works. replacing the last shift data with the MSB:LSB+1
        TMDS_shift_blue  <= TMDS_shift_load ? TMDS_blue  : TMDS_shift_blue [9:1];	
        TMDS_mod10 <= (TMDS_mod10==4'd9) ? 4'd0 : TMDS_mod10+4'd1;                 // increase counter or reset after 10 counts
    end
endmodule 
